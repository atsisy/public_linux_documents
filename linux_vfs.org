#+TITLE: 詳解Linuxファイルシステムモジュール

* Linux VFSについて

** そもそも何をするものなのか
   複数のファイルシステム（EXT4やFAT,XFSなど）を仮想的に扱うためのプログラム。

** VFSを利用する利点
*** ユーザ側の利点
    ファイルの操作を行うとき、ファイルシステムの差異を意識する必要がなくなる。
*** カーネル開発者側の利点
    新しくファイルシステムを開発するとき、ファイルシステムごとに共通な処理はVFS側が
    提供してくれるため、開発効率が向上する。
    ファイルのキャッシュなどのインターフェイスも提供してくれる。
**** カーネルが提供してくれる代表的な構造体
     | ファイルシステムタイプオブジェクト | ファイルシステムの種類を定義したオブジェクト。ファイルシステムと1対1で対応       |
     | スーパーブロック                   | ファイルシステムの制御ブロックの情報を格納したオブジェクト。statfsで確認できる。 |
     | inode                              | ファイル制御ブロックの情報を格納したオブジェクト                                 |
     | ファイル                           | プロセスがオープンしているファイルについての情報を格納したオブジェクト           |
     | dエントリー                        | ディレクトリエントリーを格納したオブジェクト。パス名解決のときに使用される。     |
     
* ファイルシステムモジュールの実装

** mountシステムコールハンドラの実装
*** 行う必要があること
**** マウント処理
**** VFSのスーパーブロックオブジェクトを初期化
**** ファイルシステムのルートdエントリを返す

*** マウント処理の実装
    マウント処理は各ファイルシステムで共通の処理なので、VFS側が関数を提供してくれる。
    | ブロック型デバイス用のファイルシステムの場合 | 非前者          |
    | mount_bdev関数                               | mount_nodev関数 |


** file_system_types構造体の設定
*** nameフィールド
    ファイルシステムの名称を表す。
*** mountフィールド
    mountシステムコールが呼び出されたときに呼び出される関数へのポインタ
*** fs_flagsフィールド
    VFSに対して自分がどのようなファイルシステムかを通知するため、このフィールドに数値を代入しておく。
**** FS_REQUIRES_DEV
     このファイルシステムはブロック型デバイスが必要だということを通知する。
** ファイルシステムの登録
*** register_filesystem関数
    引数にfile_system_type構造体を渡し、ファイルシステムを登録する関数

** ページキャッシュとバッファキャッシュ
*** 役割
    HDDなどのブロックに書き込まれた情報を利用するには、メモリにロードする必要がある。このとき、何度も同じブロックを読み込むことが多発しやすいが、
    HDDはCPUやRAMに比べ圧倒的に低速なので、パフォーマンスの低下に繋がる。そこで、一回読み込んだものはキャッシュとしてメモリ上に残しておく機能を提供するのが、
    ページキャッシュ、バッファキャッシュである。
*** ページキャッシュとバッファキャッシュ
    | ページキャッシュ   | ディスクキャッシュとして使用するメモリ |
    | バッファキャッシュ | ページを分割した領域                   |

** ページキャッシュの詳細

** バッファキャッシュの詳細
*** buffer_head構造体
    バッファキャッシュの管理データは以下にソースを示すbuffer_head構造体が担っている。
    ページキャッシュを表現するpage構造体との関係は以下のようである。

    page構造体とbuffer_head構造体の関係図
    [[file:~/Dropbox/Docments/page_buffer_head.png]]

#+BEGIN_SRC c

struct buffer_head {
        unsigned long        b_state;     /* buffer state bitmap (see above) */
        struct buffer_head   *b_this_page;/* circular list of page's buffers */
        struct page          *b_page;     /* the page this bh is mapped to   */

        sector_t             b_blocknr;   /* start block number              */
        size_t               b_size;      /* size of mapping                 */
        char                 *b_data;     /* pointer to data within the page */

        struct block_device  *b_bdev;
        bh_end_io_t          *b_end_io;   /* I/O completion                  */
        void                 *b_private;  /* reserved for b_end_io           */
        struct list_head b_assoc_buffers; /* associated with another mapping */
        struct address_space *b_assoc_map;/* mapping this buffer is
                                             associated with                 */
        atomic_t             b_count;     /* users using this buffer_head    */
};

#+END_SRC

** スーパブロック読み込み
*** スーパブロックをバッファキャッシュに読み込む
    スーパブロック読み込み処理はキャッシュレイヤーの共通処理としてVFS側で実装されている。
    
#+BEGIN_SRC c
 
#include <buffer_head.h>

/*
 * 指定したスーパブロックオブジェクトに関連付けられたブロックデバイスから、
 * 指定した論理ブロックのデータをバッファキャッシュに読み込む。
 */
struct buffer_head *
sb_bread(struct super_block *sb, sector_t block);

/*
 * 基本的な動作はsb_breadと同様。移動できないページのバッファキャッシュに読み込まれる。
 */
struct buffer_head *
sb_bread_unmovable(struct super_block *sb, sector_t block);

/*
 * 指定した論理ブロックから事前読み込みを行う。
 */
void
sb_breadahead(struct super_block *sb, sector_t block);

/*
 * スーパブロックオブジェクトに関連付けられたブロックデバイスから、指定した論理ブロックのデータをバッファキャッシュに読み込む。
 * sb_bread関数と違うのは割り当てられるページがMOVABLEとなる点。つまりスワップ時にページを置換可能となる。
 */
struct buffer_head *
sb_getblk(struct super_block *sb, sector_t block);

/*
 * 指定した論理ブロックをバッファキャッシュから読み込む。
 */
struct buffer_head *
sb_find_get_block(struct super_block *sb, sector_t block);

   
#+END_SRC

* Ext2ファイルシステム

** Ext2ディスク上のデータ構造
*** 先頭ブロック
    通常、先頭のブロックを使用することはない。これはブートセクタとして予約されているからである。
*** データ構造
    先頭ブロック以降は、すべてブロックグループに分割される。ブロックグループのレイアウトは以下の通り。
    | ブロック   | スーパブロック | ブロックグループディスクリプタ | データビットマップ | iノードビットマップ | iノードテーブル | データブロック |
    | ブロック数 |              1 | 複数                           |                  1 |                   1 | 複数            | 複数           |
    このように、データ構造には6種類の要素がある。この内、スーパブロックとブロックグループディスクリプタは一種のバックアップである。オリジナルはどこに存在するかというと、0番目のブロックグループ内のスーパブロックとブロックグループディスクリプタである。
    こうすることにより、0番目の領域が破損したとしても、例えば64番目のブロックグループの中にあるスーパブロックや、ブロックグループディスクリプタ
    を参照することにより、復旧を行うことができる。
*** ブロックグループディスクリプタ
    ブロックグループディスクリプタはスーパブロックの次のブロックに格納されている。
    ブロックグループ分のディスクリプタが存在し、各ブロックグループの管理情報が格納されている。
**** 格納されている情報
     | inodeの割当情報を示すinodeビットマップ       |
     | inodeが格納されているinodeテーブル           |
     | ブロックの割当情報を示すブロックビットマップ |
**** ブロックビットマップ
     ブロックビットマップはそのブロックグループ内で割り当てられているブロックをビットマップで管理を行っている。
     ブロックビットマップのサイズは1ブロック分。ここで、1ブロック1024バイトだとすると、このブロックビットマップは
     1024*8で8192個のブロックを管理することができる。
**** inodeビットマップ
     ブロックグループ内に割り当てられるinodeをビットマップで表現したもの。
     inodeビットマップのサイズも1ブロック分。ブロックビットマップと同様に
     1ブロックあたり1024バイトのとき、1024*8で8192個のinodeを管理することができる。
**** inodeテーブル
     inodeが格納されているテーブル。連続した複数ブロックに記録されている。

* ファイルシステムモジュールのテスト
** テストマウント用ファイルの作成
#+BEGIN_SRC sh
# ext2形式で1024バイトのサイズのイメージファイルを作成する例
mkfs -t ext2 -b 1024 ext2.img
#+END_SRC

** テストファイルをマウント
#+BEGIN_SRC sh
# マウント例
sudo mount -t 使用するファイルシステムモジュール -o loop ターゲットファイル マウント先ディレクトリ
#+END_SRC
